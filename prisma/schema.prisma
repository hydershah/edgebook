generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  pickId    String
  createdAt DateTime @default(now())
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pickId])
  @@index([pickId])
  @@index([userId])
  @@index([userId, createdAt])
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  title     String    @default("Sports Predictions Chat")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  pickId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pickId])
  @@index([userId])
  @@index([pickId, createdAt])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follow_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade)
  followedBy  User     @relation("Follow_followingIdToUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  pickId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pickId])
  @@index([pickId])
  @@index([userId])
  @@index([pickId, createdAt])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  role      String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([chatId, createdAt])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  email     String   // The email being verified
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([email])
}

model Pick {
  id         String     @id @default(cuid())
  userId     String
  pickType   PickType
  sport      Sport
  matchup    String
  details    String
  odds       String?
  mediaUrl   String?
  gameDate   DateTime
  lockedAt   DateTime?
  confidence Int        @default(1)
  status     PickStatus @default(PENDING)
  isPremium  Boolean    @default(false)
  price      Float?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  viewCount  Int        @default(0)
  bookmarks  Bookmark[]
  comments   Comment[]
  likes      Like[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases  Purchase[]
  views      View[]

  @@index([createdAt])
  @@index([sport])
  @@index([status])
  @@index([userId])
  @@index([gameDate])
  @@index([isPremium])
  @@index([lockedAt])
  @@index([sport, status])
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([sport, createdAt])
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String
  pickId          String
  amount          Float
  platformFee     Float
  stripePaymentId String
  createdAt       DateTime @default(now())
  pick            Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pickId])
  @@index([userId])
  @@index([pickId])
  @@index([createdAt])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  sellerId             String
  stripeSubscriptionId String
  status               String
  amount               Float
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([userId])
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  type            String
  amount          Float
  platformFee     Float?
  status          String
  stripePaymentId String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, createdAt])
  @@index([status])
}

model User {
  id                      String           @id @default(cuid())
  email                   String           @unique
  username                String?          @unique
  name                    String?
  password                String?
  avatar                  String?
  coverPhoto              String?
  bio                     String?
  phone                   String?
  birthday                DateTime?
  gender                  String?
  location                String?
  isPremium               Boolean          @default(false)
  isVerified              Boolean          @default(false)
  role                    UserRole         @default(USER)
  stripeCustomerId        String?
  stripeAccountId         String?
  subscriptionPrice       Float?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  instagram               String?
  facebook                String?
  youtube                 String?
  twitter                 String?
  tiktok                  String?
  website                 String?
  emailVerified           DateTime?
  twoFactorEnabled        Boolean          @default(false)
  twoFactorSecret         String?
  theme                   String           @default("light")
  notificationPreferences Json?
  privacySettings         Json?
  accounts                Account[]
  bookmarks               Bookmark[]
  chats                   Chat[]
  comments                Comment[]
  followers               Follow[]         @relation("Follow_followerIdToUser")
  following               Follow[]         @relation("Follow_followingIdToUser")
  likes                   Like[]
  loginActivities         LoginActivity[]
  passwordResets          PasswordReset[]
  picks                   Pick[]
  purchases               Purchase[]
  sessions                Session[]
  subscriptions           Subscription[]
  transactions            Transaction[]
  views                   View[]
  usernameChanges         UsernameChange[]
  auditLogs               AuditLog[]
  emailVerifications      EmailVerification[]

  @@index([username])
  @@index([role])
  @@index([createdAt])
  @@index([email])
}

model UsernameChange {
  id           String   @id @default(cuid())
  userId       String
  oldUsername  String?
  newUsername  String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model View {
  id        String   @id @default(cuid())
  userId    String?
  pickId    String
  ipAddress String?
  createdAt DateTime @default(now())
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pickId])
  @@index([userId])
  @@index([pickId, createdAt])
}

model LoginActivity {
  id         String   @id @default(cuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  location   String?
  successful Boolean  @default(true)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

enum PickStatus {
  PENDING
  WON
  LOST
  PUSH
}

enum PickType {
  SINGLE
  PARLAY
}

enum Sport {
  NFL
  NBA
  MLB
  NHL
  SOCCER
  COLLEGE_FOOTBALL
  COLLEGE_BASKETBALL
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  ipAddress   String?
  userAgent   String?
  details     Json?
  success     Boolean  @default(true)
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([resource])
  @@index([createdAt])
  @@index([success])
}
