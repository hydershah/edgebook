generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  pickId    String
  createdAt DateTime @default(now())
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pickId])
  @@index([pickId])
  @@index([userId])
  @@index([userId, createdAt])
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  title     String    @default("Sports Predictions Chat")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  pickId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Moderation fields
  reportCount Int       @default(0)
  isHidden    Boolean   @default(false)
  hiddenBy    String?
  hiddenAt    DateTime?

  pick Pick @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pickId])
  @@index([userId])
  @@index([pickId, createdAt])
  @@index([isHidden])
  @@index([reportCount])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follow_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade)
  followedBy  User     @relation("Follow_followingIdToUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  pickId    String
  voteType  VoteType
  createdAt DateTime @default(now())
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pickId])
  @@index([pickId])
  @@index([userId])
  @@index([pickId, createdAt])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  role      String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([chatId, createdAt])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  email     String // The email being verified
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([email])
}

model Pick {
  id         String     @id @default(cuid())
  userId     String
  pickType   PickType
  sport      Sport
  matchup    String
  details    String
  odds       String?
  mediaUrl   String?
  gameDate   DateTime
  lockedAt   DateTime?
  confidence Int        @default(1)
  status     PickStatus @default(PENDING)
  isPremium  Boolean    @default(false)
  price      Float?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  viewCount  Int        @default(0)

  // Moderation fields
  moderationStatus ModerationStatus @default(APPROVED)
  reportCount      Int              @default(0)
  moderatedBy      String?
  moderatedAt      DateTime?
  moderationNotes  String?

  bookmarks Bookmark[]
  comments  Comment[]
  likes     Like[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases Purchase[]
  views     View[]
  disputes  Dispute[]

  @@index([createdAt])
  @@index([sport])
  @@index([status])
  @@index([userId])
  @@index([gameDate])
  @@index([isPremium])
  @@index([lockedAt])
  @@index([sport, status])
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([sport, createdAt])
  @@index([moderationStatus])
  @@index([reportCount])
}

model Purchase {
  id              String        @id @default(cuid())
  userId          String
  pickId          String
  amount          Float
  platformFee     Float
  creatorEarnings Float? // Optional for migration
  stripePaymentId String? // Keep for migration
  whopPaymentId   String?       @unique
  paymentMethod   String? // card, ach, crypto, bnpl
  status          PaymentStatus @default(PENDING)
  refundedAt      DateTime?
  refundAmount    Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  pick            Pick          @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pickId])
  @@index([userId])
  @@index([pickId])
  @@index([createdAt])
  @@index([status])
  @@index([whopPaymentId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id                   String             @id @default(cuid())
  subscriberId         String
  creatorId            String
  stripeSubscriptionId String? // Keep for migration
  whopSubscriptionId   String?            @unique
  status               SubscriptionStatus @default(PENDING)
  amount               Float
  platformFee          Float
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  subscriber           User               @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  creator              User               @relation("CreatorSubscriptions", fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, creatorId])
  @@index([subscriberId])
  @@index([creatorId])
  @@index([status])
  @@index([whopSubscriptionId])
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  type            String // Temporarily keep as String for migration
  amount          Float
  platformFee     Float?
  status          String // Temporarily keep as String for migration
  referenceId     String? // Reference to Purchase/Subscription/Payout ID
  stripePaymentId String? // Keep for migration
  whopReferenceId String?
  description     String?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  payoutId        String?
  payout          Payout?           @relation(fields: [payoutId], references: [id])

  @@index([userId])
  @@index([userId, createdAt])
  @@index([status])
  @@index([type])
  @@index([referenceId])
}

model User {
  id                      String       @id @default(cuid())
  email                   String       @unique
  username                String?      @unique
  name                    String?
  password                String?
  avatar                  String?
  coverPhoto              String?
  bio                     String?
  phone                   String?
  birthday                DateTime?
  gender                  String?
  location                String?
  isPremium               Boolean      @default(false)
  isVerified              Boolean      @default(false)
  role                    UserRole     @default(USER)
  stripeCustomerId        String?
  stripeAccountId         String?
  subscriptionPrice       Float?
  subscriptionEnabled     Boolean      @default(false)
  whopUserId              String?      @unique
  whopAccountId           String?
  payoutMethod            PayoutMethod @default(BANK)
  cryptoWalletAddress     String?
  bankAccountId           String?
  minPayout               Float        @default(1000)
  autoWithdraw            Boolean      @default(true)
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  instagram               String?
  facebook                String?
  youtube                 String?
  twitter                 String?
  tiktok                  String?
  website                 String?
  emailVerified           DateTime?
  twoFactorEnabled        Boolean      @default(false)
  twoFactorSecret         String?
  theme                   String       @default("light")
  notificationPreferences Json?
  privacySettings         Json?

  // Moderation fields
  accountStatus    AccountStatus @default(ACTIVE)
  suspendedUntil   DateTime?
  banReason        String?
  suspensionReason String?
  bannedAt         DateTime?
  bannedBy         String?
  suspendedBy      String?
  warningCount     Int           @default(0)
  lastWarningAt    DateTime?
  trustScore       Float         @default(100)
  flagCount        Int           @default(0)

  accounts              Account[]
  bookmarks             Bookmark[]
  chats                 Chat[]
  comments              Comment[]
  followers             Follow[]               @relation("Follow_followerIdToUser")
  following             Follow[]               @relation("Follow_followingIdToUser")
  likes                 Like[]
  loginActivities       LoginActivity[]
  passwordResets        PasswordReset[]
  picks                 Pick[]
  purchases             Purchase[]
  sessions              Session[]
  subscriptions         Subscription[]         @relation("UserSubscriptions")
  creatorSubscriptions  Subscription[]         @relation("CreatorSubscriptions")
  transactions          Transaction[]
  views                 View[]
  payouts               Payout[]
  paymentConfigurations PaymentConfiguration[]
  usernameChanges       UsernameChange[]
  auditLogs             AuditLog[]
  emailVerifications    EmailVerification[]
  reports               Report[]               @relation("UserReports")
  reviewedReports       Report[]               @relation("ReviewedReports")
  disputes              Dispute[]
  payoutReviews         PayoutReview[]

  @@index([username])
  @@index([role])
  @@index([createdAt])
  @@index([email])
  @@index([accountStatus])
  @@index([trustScore])
}

model UsernameChange {
  id          String   @id @default(cuid())
  userId      String
  oldUsername String?
  newUsername String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model View {
  id        String   @id @default(cuid())
  userId    String?
  pickId    String
  ipAddress String?
  createdAt DateTime @default(now())
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pickId])
  @@index([userId])
  @@index([pickId, createdAt])
}

model LoginActivity {
  id         String   @id @default(cuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  location   String?
  successful Boolean  @default(true)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

enum PickStatus {
  PENDING
  WON
  LOST
  PUSH
}

enum PickType {
  SINGLE
  PARLAY
}

enum Sport {
  NFL
  NBA
  MLB
  NHL
  SOCCER
  COLLEGE_FOOTBALL
  COLLEGE_BASKETBALL
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  ipAddress  String?
  userAgent  String?
  details    Json?
  success    Boolean  @default(true)
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([resource])
  @@index([createdAt])
  @@index([success])
}

model Report {
  id         String @id @default(cuid())
  reporterId String
  reporter   User   @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)

  targetType ReportTargetType
  targetId   String

  reason      ReportReason
  description String?
  evidence    Json? // Screenshots, links, etc.

  status   ReportStatus   @default(PENDING)
  priority ReportPriority @default(MEDIUM)

  reviewedBy  String?
  reviewer    User?   @relation("ReviewedReports", fields: [reviewedBy], references: [id], onDelete: SetNull)
  reviewNotes String?
  resolution  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  @@index([status, priority])
  @@index([targetType, targetId])
  @@index([reporterId])
  @@index([reviewedBy])
  @@index([createdAt])
}

model Dispute {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickId String
  pick   Pick   @relation(fields: [pickId], references: [id], onDelete: Cascade)

  reason   String
  evidence Json? // Screenshots, game links, etc.

  status     DisputeStatus @default(OPEN)
  resolution String?
  resolvedBy String?
  resolvedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([userId])
  @@index([pickId])
  @@index([createdAt])
}

model PayoutReview {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  period       String // e.g., "2024-01"
  picksSold    Int
  totalRevenue Float
  platformFee  Float
  netAmount    Float

  status PayoutStatus @default(PENDING)

  reviewedBy  String?
  reviewNotes String?

  stripeTransferId String?
  paidAt           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, period])
  @@index([status])
  @@index([userId])
  @@index([createdAt])
}

model PlatformSetting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        SettingType
  category    String
  description String?

  updatedBy String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([category])
}

model PaymentConfiguration {
  id                   String   @id @default(cuid())
  platformFeePercent   Float    @default(15.0)
  minPickPrice         Float    @default(50)
  maxPickPrice         Float    @default(1000000)
  minSubscriptionPrice Float    @default(499)
  maxSubscriptionPrice Float    @default(99999)
  withdrawalMinimum    Float    @default(1000)
  withdrawalEnabled    Boolean  @default(true)
  paymentProvider      String   @default("whop")
  updatedAt            DateTime @updatedAt
  createdAt            DateTime @default(now())
  updatedBy            String?
  user                 User?    @relation(fields: [updatedBy], references: [id])

  @@index([updatedAt])
}

model Payout {
  id              String        @id @default(cuid())
  userId          String
  amount          Float
  method          PayoutMethod
  status          PayoutStatus  @default(PENDING)
  whopTransferId  String?       @unique
  transactionHash String?
  failureReason   String?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, status]) // Optimized for duplicate payout prevention queries
}

model WebhookEvent {
  id              String    @id @default(cuid())
  provider        String
  eventType       String
  payload         Json
  processed       Boolean   @default(false)
  processingError String?
  attempts        Int       @default(0)
  createdAt       DateTime  @default(now())
  processedAt     DateTime?

  @@index([provider, eventType])
  @@index([processed])
  @@index([createdAt])
}

enum ReportTargetType {
  PICK
  COMMENT
  USER
  TRANSACTION
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  FRAUD
  SCAM
  HARASSMENT
  COPYRIGHT
  MISLEADING
  FAKE_RESULTS
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DisputeStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  REJECTED
  ESCALATED
}

enum PayoutStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  PROCESSING
  PAID
  FAILED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  BANNED
  UNDER_REVIEW
  RESTRICTED
}

enum ModerationStatus {
  APPROVED
  PENDING_REVIEW
  FLAGGED
  REMOVED
  AUTO_FLAGGED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

enum TransactionType {
  PICK_PURCHASE
  PICK_SALE
  SUBSCRIPTION
  SUBSCRIPTION_REVENUE
  PAYOUT
  REFUND
  PLATFORM_FEE
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

enum PayoutMethod {
  BANK
  CRYPTO
  PAYPAL
  WHOP_BALANCE
}
